<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-security-attestation">
 <info>
  <title>Remote attestation using Keylime</title>
  <abstract>
   <para>
    This chapter focuses on remote attestation of &slema; using the
    <emphasis>keylime</emphasis> agent.
   </para>
  </abstract>
 </info>
 <para>
  With the growing demand on securing devices against unauthorized changes,
  usage of the security mechanism called <emphasis>remote attestation
  (RA)</emphasis> has been experiencing significant growth. Using RA a host
  (client) can authenticate it's hardware and software configuration on a
  remote host (server). <emphasis>Remote attestation</emphasis> is usually
  combined with public-key encryption, thus the sent information can only be
  read by the programs that requested the attestation.
 </para>
 <para>
  Throughout this document, the following terms are used:
 </para>
 <variablelist>
  <title>Terminology</title>
  <varlistentry>
   <term>Attestation key (AK)</term>
   <listitem>
    <para>
     is a data signing key that proves that the data comes from a real TPM and
     have not been tampered with.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Core root of trust for measurement</term>
   <listitem>
    <para>
     is a starting point of the boot process that cannot be altered and
     calculates the first hash of the layer above.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Endorsement key (EK)</term>
   <listitem>
    <para>
     is an encryption key that is permanently embedded in the TPM, when it is
     manufactured. The public part of the key is used to recognize a genuine
     TPM.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Integrity management architecture (IMA)</term>
   <listitem>
    <para>
     the kernel integrity subsystem that provides a means of detecting malicious
     changes to files.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Measured boot</term>
   <listitem>
    <para>
     in this method each software in the booting sequence is checked by the
     layer below. A hash based on the disk or memory content is calculated for
     each layer and the hash is compared to a value in PCR.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Platform Configuration Register (PCR)</term>
   <listitem>
    <para>
     is a memory location in TPM that, for example, stores hashes of booting
     layers. PCR can be signed to return a secure report called attestation.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Secure boot</term>
   <listitem>
    <para>
     each step of the booting process checks a cryptographic signature
     signature on the executable of the next step before launching it.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Trusted Platform Module (TPM)</term>
   <listitem>
    <para>
     is a self-contained security processor that can be attached to a system
     bus as a simple peripheral. TPM provides PCR for storing booting layers
     hashes. A typical TPM can store 24 PCRs, and PCRs can utilize different
     hash functions at the same time, for example, you can use SHA1 and SHA512
     simultaneously.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <para>
  By default, TPM usage is disabled, therefore, the remote attestation does not
  take place. To enable the remote attestation, enable TPM in the EFI/BIOS
  menu.
 </para>
 <section xml:id="sec-keylime-about">
  <title>About <emphasis>Keylime</emphasis></title>
  <para>
   <emphasis>Keylime</emphasis> is a TPM-based remote attestation solution that
   enables you to monitor remote nodes using a hardware based cryptographic core
   root of trust for measurement. <emphasis>Keylime</emphasis> also provides a
   framework for remote attestation of any PCR. Using
   <emphasis>Keylime</emphasis> you can create your own set of actions
   triggered when a machine fails the attested measurements.
  </para>
  <para>
   <emphasis>Keylime</emphasis> consists of an agent, a verifier, registrar and
   a command-line tool (tenant). Agents are those systems that needs to be
   attested, verifier and registrar are on remote systems and perform
   registration and attestation of agents. Keep in mind that only the agent
   role is available on &slema;. For details about each component, refer to the
   following sections.
  </para>
  <section xml:id="sec-keylime-agent">
   <title><emphasis>Keylime</emphasis> agent</title>
   <para>
    The agent is a service that runs on the system that needs to be attested.
    The agent communicates with the TPM using its keys and certificates.
   </para>
   <para>
    When a new agent is started, the agent needs to register itself in
    registrar. To do so, the agent sends its attestation key, endorsement key
    and a endorsement to the registrar. Once the agent has been registered, it
    is ready to be enrolled for attestation.
   </para>
  </section>
  <section xml:id="sec-keylime-registrar">
   <title><emphasis>Keylime</emphasis> registrar</title>
   <para>
    Registar is used to register agents that should be attested. Registar
    collects the agent's attestation key, endorsement key and endorsement key
    certification, and verifies that the agent attestation key belongs to the
    endorsement key.
   </para>
  </section>
  <section xml:id="sec-keylime-verifier">
   <title><emphasis>Keylime</emphasis> verifier</title>
   <para>
    The verifier performs the actual attestation of agents and continuously
    pulls the required attestation data from agents (amongst others the PCR
    values, IMA logs, UEFI event logs).
   </para>
  </section>
 </section>
 <section xml:id="sec-setup-verifier">
  <title>Setting up verifier and registrar</title>
  <para>
   Before you start installing and registering agents, prepare the verifier and
   the registrar on remote hosts as described in the following procedure.
  </para>
  <procedure>
   <step>
    <para>
     Check the content of the <filename>/etc/keylime.conf</filename> file:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <literal>require_ek_cert</literal> in the <literal>[tenant]</literal>
       section - if you do not have the root certificate for the endorsement
       key, set this value to <literal>false</literal>.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>ek_check_script</literal> if you set
       <literal>require_ek_cert</literal> to <literal>false</literal>, provide
       a script that checks the provided EK against an signed allow list, for
       example, a list of EK public key hashes.
      </para>
     </listitem>
     <listitem>
      <para>
       in the section <literal>[ca]</literal>, edit the options prefixed with
       <literal>cert_</literal> to suit your needs.
      </para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>
     Start and enable the verifier service:
    </para>
<screen>&prompt.root;systemctl enable --now keylime_verifier.service</screen>
    <para>
     Starting the service generates certificates that are further required by
     registrar.
    </para>
   </step>
   <step>
    <para>
     If the previous command completes successfully, you can start and enable
     the registrar service:
    </para>
<screen>&prompt.root;systemctl enable --now keylime_registrar.service</screen>
   </step>
  </procedure>
 </section>
 <section xml:id="sec-install-keylime">
  <title>Installing <emphasis>Keylime</emphasis> agent</title>
  <para>
   The <emphasis>Keylime</emphasis> agent is not present on &slema; by default,
   you need to install it manually. To install the agent, proceed as follows:
  </para>
  <procedure>
   <step>
    <para>
     Install the <literal>rust-keylime</literal> package as follows:
    </para>
<screen>&prompt.root;transactional-update pkg in rust-keylime</screen>
   </step>
   <step>
    <para>
     Reboot your system.
    </para>
   </step>
   <step>
    <para>
     Adjust the default agent's configuration.
    </para>
    <substeps>
     <step>
      <para>
       Create a directory to store a new configuration file for your changes in
       <filename>/etc/keylime/agent.conf.d/</filename>. The default
       configuration is stored in
       <filename>/usr/etc/keylime/agent.conf</filename>, but we do not
       recommend editing this file, because it might get overwritten with next
       system updates.
      </para>
<screen>&prompt.root;mkdir -p /etc/keylime/agent.conf.d</screen>
     </step>
     <step>
      <para>
       Create a new file
       <filename>/etc/keylime/agent.conf.d/agent.conf</filename>:
      </para>
<screen>&prompt.root;cat &lt;&lt; EOF > /etc/keylime/agent.conf.d/agent.conf
 [agent]
 
 uuid = "d111ec46-34d8-41af-ad56-d560bc97b2e8"
 registrar_ip = "<replaceable>REMOTE_IP</replaceable>>"
 revocation_notification_ip = "<replaceable>REMOTE_IP</replaceable>"
 EOF</screen>
      <para>
       where:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         <literal>uuid</literal> is generated each time the agent is run.
         However, you can define a specific value by this option.
        </para>
       </listitem>
       <listitem>
        <para>
         <replaceable>REMOTE_IP</replaceable> is an IP address of the
         registrar.
        </para>
       </listitem>
       <listitem>
        <para>
         <replaceable>REMOTE_IP</replaceable> is an IP address of the verifier.
        </para>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       Change the owner of the <filename>/etc/keylime/</filename> directory to
       <literal>keylime:tss</literal>:
      </para>
<screen>&prompt.root;chown -R keylime:tss /etc/keylime</screen>
     </step>
     <step>
      <para>
       Change permissions on the <filename>/etc/keylime/</filename> directory:
      </para>
<screen>&prompt.root;chmod -R 600 /etc/keylime</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Copy the certificates generated by the CA to the agent node. On the agent
     node, run:
    </para>
    <substeps>
     <step>
      <para>
       prepare a directory for the certificate:
      </para>
<screen>&prompt.root;mkdir -p /var/lib/keylime/cv_ca</screen>
     </step>
     <step>
      <para>
       Copy the certificate to the agent
      </para>
<screen>&prompt.root;scp <replaceable>CERT_SERVER_ADDRESS</replaceable>:/var/lib/keylime/cv_ca/cacert.crt /var/lib/keylime/cv_ca</screen>
     </step>
     <step>
      <para>
       Change the owner of the certificate to <literal>keylime</literal>:
      </para>
<screen>&prompt.root;chown -R keylime:tss /var/lib/keylime/cv_ca</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Start and enable the <literal>keylime_agent.service</literal>:
    </para>
<screen>&prompt.root;systemctl enable --now keylime_agent.service</screen>
   </step>
  </procedure>
 </section>
 <section xml:id="sec-keyline-registration">
  <title>Registering agents</title>
  <note>
   <title>&slema; does not provide neither tenant, registrar nor verifier</title>
   <para>
    &slema; provides only the <emphasis>Keylime</emphasis> agent capability,
    therefor, the tasks performed in this chapter cannot be performed from your
    &slema;.
   </para>
  </note>
  <para>
   You can register a new agent either by using the CLI tenant or by editing
   the configuration of the verifier. Using the tenant on the verifier host,
   run the following:
  </para>
<screen>&prompt.root;keylime_tenant -v 127.0.0.1 \
                -t <replaceable>AGENT</replaceable> \
                -u <replaceable>UUID</replaceable> \
                --cert default \
                -c add
                [--include <replaceable>PATH_TO_ZIP_FILE</replaceable>]</screen>
  <para>
   Where:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <replaceable>AGENT</replaceable> is an IP address of the agent to be
     registered.
    </para>
   </listitem>
   <listitem>
    <para>
     <replaceable>UUID</replaceable> is the agent's UUID.
    </para>
   </listitem>
   <listitem>
    <para>
     the file passed by the <option>include</option> option is used to deliver
     secret payload data to the agent. For details, refer to
     <xref linkend="keylime-payload"/>.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Alternatively, to register the agent, add the agent's UUID into the
   verifier's <filename>/etc/keylime.conf</filename> file as follows:
  </para>
<screen>agent_uuid = d432fbb3-d2f1-4a97-9ef7-75bd81c00000</screen>
  <para>
   You can list registered agents by using the <command>reglist</command>
   command as follows on the verifier host:
  </para>
<screen>&prompt.root;keylime_tenant -v 127.0.0.1 \
                --cert default \
                -c reglist</screen>
  <para>
   To remove a registered agent, specify the agent using the
   <option>-t</option> and <option>-u</option> options and the <option>-c
   delete</option> command as follows:
  </para>
<screen>&prompt.root;keylime_tenant -v 127.0.0.1 \
              -t <replaceable>AGENT</replaceable> \
              -u <replaceable>UUID</replaceable> \
              -c delete</screen>
 </section>
 <section xml:id="keylime-payload">
  <title>Secure payloads</title>
  <para>
   Secure payload enables you to deliver encrypted data to agents. Typically
   these payloads are used to provide keys, passwords, certificates for root of
   trust and so on that are further used by the agent.
  </para>
  <para>
   The secure payload is delivered to the agent in a <filename>zip</filename>
   file that must contain a shell script&mdash;<filename>autorun.sh</filename>.
   The script will be executed only if the agent has been properly registered
   and verified. To deliver the <filename>zip</filename> file, use the
   <option>--include</option> option of the <command>keylime_tenant</command>
   command.
  </para>
  <para>
   The script <filename>autorun.sh</filename> contains steps that will enable
   using of passwords, certificates and so on. For example, the script can
   create a directory structure and copy SSH keys there:
  </para>
<screen>#!/bin/bash
 
 mkdir -p /root/.ssh/
 cp id_rsa* /root/.ssh/
 chmod 600 /root/.ssh/id_rsa*
 cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys</screen>
  <para>
   In this case, do not forget to include the SSH keys to the
   <filename>zip</filename> file.
  </para>
 </section>
 <section xml:id="enable-ima-tracking">
  <title>Enabling IMA tracking</title>
  <para>
   Using IMA you can calculate a hash of a file before the file is executed.
   The hash is compared to the one stored in PCR in TPM, if the hash is the
   same, an access to the file is authorized. For a high level overview of
   IMA/EMV, refer to
   <link xlink:href="https://en.opensuse.org/SDB:Ima_evm#Introduction">IMA/EMV
   introduction</link>.
  </para>
  <para>
   With <emphasis>Keylime</emphasis>, you can perform the remote attestation of
   the IMA hashes using the security provided by TPM. To enable the process,
   boot a kernel of the agent with the parameters:
   <literal>ima_appraise=log</literal> and <literal>ima_policy=tcb</literal>.
   To use the boot parameters on boot, proceed as follows:
  </para>
  <procedure>
   <step>
    <para>
     Update the <option>GRUB_CMDLINE_LINUX_DEFAULT</option> option with the
     parameters in <filename>/etc/default/grub</filename>:
    </para>
<screen>GRUB_CMDLINE_LINUX_DEFAULT="ima_appraise=log ima_policy=tcb"</screen>
   </step>
   <step>
    <para>
     Regenerate <filename>grub.cfg</filename> by running:
    </para>
<screen>&prompt.root;transactional-update grub.cfg</screen>
   </step>
   <step>
    <para>
     Reboot your system.
    </para>
   </step>
  </procedure>
  <para>
   The procedure above uses the default kernel IMA policy, but we recommend
   creating a new policy to avoid monitoring of too many files and therefor
   creating long logs. For details, refer to the
   <link xlink:href="https://keylime-docs.readthedocs.io/en/latest/user_guide/runtime_ima.html"><emphasis>Keylime</emphasis>
   documentation</link>.
  </para>
  <para>
   To indicate the expected hashes, use the <option>--allowlist</option>option
   of the <command>keylime_tenant</command> command when registering the agent.
   To view the excluded or ignored files, use the <option>--exclude</option>
   option of the <command>keylime_tenant</command> command:
  </para>
<screen>&prompt.root;keylime_tenant --allowlist
    -v 127.0.0.1 \
-u <replaceable>UUID</replaceable> 
  </screen>
 </section>
</chapter>
