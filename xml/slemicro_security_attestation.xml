<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-security-attestation">
  <info>
    <title>Remote attestation using Keylime</title>
  <abstract>
   <para>
    This chapter focuses on remote attestation of &slema; using the <emphasis>keylime</emphasis> agent.
   </para>
  </abstract>
</info>

  <para>
    With the growing demand on securing devices against unauthorized changes, usage of the security mechanism called <emphasis>remote attestation (RA)</emphasis> has been experiencing significant growth. Using RA a host (client) can authenticate it's hardware and software configuration on a remote host (server). <emphasis>remote attestation</emphasis> is usually combined with public-key encryption, thus the sent information can only be read by the programs that requested the attestation.
  </para>
  <para>
    Throughout this document, the following terms are used:
  </para>

  <variablelist>
    <title>Terminology</title>
    <varlistentry>
      <term>Attestation key (AK)</term>
      <listitem>
        <para>
          is a data signing key that proves that the data comes from a real TPM and have not been tampered with.
        </para>
      </listitem>
     </varlistentry>
    <varlistentry>
      <term>Core root of trust for measurement</term>
      <listitem>
        <para>
          is a starting point of the boot process that cannot be altered and calculates the first hash of the layer above.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Endorsement key (EK)</term>
      <listitem>
        <para>
          is an encryption key that is permanently embedded in the TPM, when it is manufactured. The public part of the key is used to recognize a genuine TPM.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Integrity management architecture (IMA)</term>
      <listitem>
        <para>
          the kernel integrity subsytem that provides a means of detecting malicious changes to files.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
    <term>Measured boot</term>
        <listitem>
          <para>
            in this method each software in the booting sequence is checked by the layer below. A hash based on the disk or memory content is calculated for each layer and the hash is compared to a value in PCR.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Platform Configuration Register (PCR)</term>
        <listitem>
          <para>
            is a memory location in TPM that, for example, stores hashes of booting layers. PCR can be signed to return a secure report called attestation.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Secure boot</term>
        <listitem>
          <para>
            each step of the booting process checks a cryptographic signature signature on the executable of the next step before launching it.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Trusted Platform Module (TPM)</term>
        <listitem>
          <para>
            is a self-contained security processor that can be attached to a system bus as a simple peripheral. TPM provides PCR for storing booting layers hashes. A typical TPM can store 24 PCRs, and PCRs can utilize different hash functions at the same time, for ecample, you can use SHA1 and SHA512 simultaneously.
          </para>
        </listitem>
      </varlistentry>
  </variablelist>

<para>
  By default, TPM usage is disabled, therefore, the remote attestation does not take place. To enable the remote attestation, enable TPM in the EFI/BIOS menu.
</para>

<section xml:id="sec-keylime-about">
  <title>About <emphasis>Keylime</emphasis></title>
  <para>
    <emphasis>Keylime</emphasis> is a TPM-based remote attestation solution that enables you to monitor remote nodes using a hadware based cryptographic core root of trust for measurement. <emphasis>Keylime</emphasis> also provides a framework for remote attestation of any PCR. Using <emphasis>Keylime</emphasis> you can create your own set of actions triggered when a machine fails the attested measurements.
  </para>
  <para>
    <emphasis>Keylime</emphasis> consists of an agent, a verifier, registrar and a command-line tool - tenant. Agents are those system that needs to be attested, verifier and registrar are on remote systems and perfomr registration and attestation of agents. Keep in mind that only the agent role is available on &slema;. For detail about each component, refer to the following sections.
  </para>
  

  <section xml:id="sec-keylime-agent">
    <title><emphasis>Keylime</emphasis> agent</title>
    <para>
      The agent is a service that runs on the system that needs to be attested. The agent communicates with the TPM using its keys and certificates.
    </para>
    <para>
    When a new agent is started, the agent needs to register itself in registrar. To do so, the agent sends its attestation key, endorsement key and a endorsement to the registrar. Once the agent has been registered, it is ready to be enrolled for attestation. 
  </para>
  </section>

  <section xml:id="sec-keylime-registrar">
    <title><emphasis>Keylime</emphasis> registrar</title>
    <para>
      Registar is used to register agents that should be attested. Registar collects the agent's attestation key, endorsement key and endorsement key certification, and verifies that the agent attestation key belongs to the endorsement key.
    </para>
  </section>

  <section xml:id="sec-keylime-verifier">
    <title><emphasis>Keylime</emphasis> verifier</title>
<para>
  The verifier performs the actual attestation of agents and continuosly pulls the required attestation data from agents (amongs others the PCR values, IMA logs, UEFI event logs).
</para>
  </section>
  </section>

  <section xml:id="sec-setup-verifier">
    <title>Setting up verifier and regstrat</title>
    <para>
      Before you start installing and registering agents, prepare the verifier and the registrar on remote hosts as decribed in the following procedure.
    </para>
    <procedure>
      <step>
        <para>
          Check the content of the <filename>/etc/keylime.conf</filename> file:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <literal>require_ek_cert</literal> in the <literal>[tenant]</literal> section - if you do not have the root certificate for the endorsement key, set this value to <literal>false</literal>.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>ek_check_script</literal> if you set <literal>require_ek_cert</literal> to <literal>false</literal>, provide a script that checks the provided EK against an signed allow list, for example, a list of EK public key heashes.
            </para>
          </listitem>
          <listitem>
            <para>
              in the section <literal>[ca]</literal>, edit the options prefixed with <literal>cert_</literal> to suit your needs.
            </para>
          </listitem>
        </itemizedlist>
      </step>
      <step>
        <para>
          Start and enable the verifier service:
        </para>
        <screen>&prompt.root;systemctl enable --now keylime_verifier.service</screen>
        <para>
          Starting the service generates certificates that are further required by registrar.
        </para>
      </step>
      <step>
        <para>
          If the previous command completes successfully, you can start and enable the registrar service:
        </para>
        <screen>&prompt.root;systemctl enable --now keylime_registrar.service</screen>
      </step>
    </procedure>
  </section>

  <section xml:id="sec-install-keylime">
    <title>Installing <emphasis>Keylime</emphasis> agent</title>
    <para>
      <emphasis>Keylime</emphasis> is not present on &slema; by default, you need to install it manually. To install <emphasis>Keylime</emphasis>, proceed as follows:
    </para>
    <procedure>
      <step>
        <para>
          Install the <literal>rust-keylime</literal> package as follows:
        </para>
        <screen>&prompt.root;transactional-update pkg in rust-keylime</screen>
      </step>
      <step>
        <para>
          Reboot your system.
        </para>
      </step>
      <step>
        <para>
          Edit the <filename>/etc/keylime-agent.conf</filename> configuration file as follows:
        </para>
        <variablelist>
          <varlistentry>
            <term><literal>receive_revocation_ip</literal></term>
          <listitem>
            <para>
              in the <literal>[general]</literal> section to point to the revocation server. The IP address is usually the same as is the IP address of the verifier.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>registrar_ip</literal></term>
          <listitem>
            <para>
              in the <literal>[cloud_agent]</literal> section to point to the IP address of your registrar server.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>agent_uuid</literal></term>
          <listitem>
            <para>
              in the <literal>[cloud_agent]</literal>. Set the value to <literal>hostname</literal>, <emphasis>Keylime</emphasis> will use the full-qualified domain name of the current host as the agent ID.
            </para>
          </listitem>
        </varlistentry>
        </variablelist>
      </step>
      <step>
        <para>
          Copy the certificates generated by the CA to the agent node:
        </para>
        <substeps>
          <step>
            <para>
            prepare a directory for the certificate:
          </para>
          <screen>&prompt.root;mkdir -p /var/lib/keylime/cv_ca</screen>
          </step>
          <step>
            <para>
              Copy the certificate to the agent
            </para>
            <screen>&prompt.root;scp <replaceable>CERT_SERVER_ADDRESS</replaceable>:/var/lib/keylime/cv_ca/cacert.crt /var/lib/keylime/cv_ca</screen>
          </step>
          <step>
            <para>
              Change the owner of the certificate to <literal>keylime</literal>:
            </para>
            <screen>&prompt.root;chown -R keylime:tss /var/lib/keylime/cv_ca</screen>
          </step>
        </substeps>        
          </step>
          <step>
            <para>
              Start and enable the <literal>keylime_agent.service</literal>:
            </para>
            <screen>&prompt.root;systemctl enable --now keylime_agent.service</screen>
          </step>
    </procedure>
  </section>

  <section xml:id="sec-keyline-registration">
    <title>Registering agents</title>
    <note>
      <title>&slema; does not provide neither tenant, registrar nor verifier</title>
      <para>
        &slema; provides only the <emphasis>Keylime</emphasis> agent capability, therefor, the tasks performed in this chapter cannot be performed from your &slema;.
      </para>
    </note>
    <para>
    You can register a new agent either by using the CLI tenant or by editing the configuration of the verifier. Using the tenant, run the following:
    </para>
    <screen>&prompt.root;keylime_tenant -v 127.0.0.1 \
                -t <replaceable>AGENT</replaceable> \
                -u <replaceable>UUID</replaceable> \
                --cert default \
                -c add</screen>

<para>
  Where: 
</para>
<itemizedlist>
  <listitem>
    <para>
      <replaceable>AGENT</replaceable> is an IP address of the agent to be registered.
    </para>
  </listitem>
  <listitem>
    <para>
      <replaceable>UUID</replaceable> is the agent's UUID.
    </para>
  </listitem>
  </itemizedlist>
    <para>
      Alternatively, to register the agent by adding the agent's UUID into the verifier's <filename>/etc/keylime.conf</filename> file as follows: 
    </para>
    <screen></screen>
  </section>

  </chapter>
